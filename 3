#include <Windows.h>

#include <stdio.h>

typedef unsigned long long Address,Size;

#define Hash(str,strsz)

/*******************************************************************************

	E0 ===================================
	E1 ===================================
	E2 ===================================
	E3 ===================================
	E4 ===================================
	E5 ===================================
	E6 ===================================
	E7 ===================================

*******************************************************************************/

typedef struct {
	Address address;
	Size    width;
	Size    height;
} Table;

Size PerfFreq;
Size PerfBegin, PerfEnd;
#define BeginPerf(s) ({Print(":: [ %s ] ::\n",s);QueryPerformanceCounter((PLARGE_INTEGER)&PerfBegin);})
#define EndPerf()    ({QueryPerformanceCounter((PLARGE_INTEGER)&PerfEnd);Print("ELAPSE: %llu\n",ElapsePerf());})
#define ElapsePerf() ((PerfEnd-PerfBegin)*1000000000/PerfFreq)

#define Assert(x) ({ if (!(x)) __debugbreak(); })

HINSTANCE Instance;

#define REQUESTED_PAGES_COUNT 4
ULONG_PTR PagesCount=REQUESTED_PAGES_COUNT;
ULONG_PTR PageFrames[REQUESTED_PAGES_COUNT];
DWORD     PageGranularity;
LPVOID    Addresses;

SYSTEM_INFO SysInfo;

#define Print(...) printf(__VA_ARGS__)

BOOL Result;

int main(void)
{
	Instance=GetModuleHandle(0);
	QueryPerformanceFrequency((PLARGE_INTEGER)&PerfFreq);
	GetSystemInfo(&SysInfo);
	PageGranularity=SysInfo.dwPageSize;

	BeginPerf("AllocateUserPhysicalPages");
	Result=AllocateUserPhysicalPages(Instance,&PagesCount,PageFrames);
	EndPerf();
	Assert(Result==TRUE);
	Print("PagesCount: %llu\n",PagesCount);

	BeginPerf("VirtualAlloc");
	Addresses=VirtualAlloc(0,PagesCount*PageGranularity,MEM_RESERVE|MEM_PHYSICAL,PAGE_READWRITE);
	EndPerf();
	Assert(Addresses);

	BeginPerf("MapUserPhysicalPages");
	//MapUserPhysicalPages();
	EndPerf();

	return 0;
}